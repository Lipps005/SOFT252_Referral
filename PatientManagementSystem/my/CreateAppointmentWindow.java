/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my;

import java.io.File;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import my.models.Appointment;
import my.models.AppointmentRequest;
import my.models.Secretary;
import my.models.userevents.Listable.FilterIsDate;
import my.models.userevents.Listable.FilterIsTime;
import my.models.userevents.Listable.FilterRemovePrecedingDate;
import my.models.userevents.Listable.FilterRemoveSucceedingDate;
import my.models.userevents.Listable.IFilterByDateTimeBehaviour;
import my.models.userevents.Listable.ILoadAllBehaviour;
import my.models.userevents.Listable.ListableDirectory;
import my.models.userevents.Listable.LoadObjectsFromFile;
import my.models.userevents.SubFrameCloseListener;


/**
 *
 * @author samue
 */
public class CreateAppointmentWindow extends javax.swing.JFrame {

   private final AppointmentRequest request;
   private Appointment appointment;
   SubFrameCloseListener listener;
   private Secretary secretary;
   
   private DefaultListModel ReservedAppointments;
   private ListableDirectory directory;
   private ILoadAllBehaviour loadBehaviour;
   private IFilterByDateTimeBehaviour dateTimeFilter;

   /**
    * Creates new form CreateAppointmentWindow
    */
   public CreateAppointmentWindow(AppointmentRequest request, Secretary secretary) {
      initComponents();
      this.request = request;
      this.secretary = secretary;
      PatientNameJLabel1.setText(this.request.getPatientUID());
      DoctorNameJLabel.setText(this.request.getDoctorUID());
      DateFromJLabel.setText(this.request.getDateFrom().toString());
      //short one-line if statement to set the date to label
      DateToJLabel.setText(this.request.getDateTo().equals(LocalDate.MAX)? "Any Date" : this.request.getDateTo().toString());
      
      this.loadBehaviour = new LoadObjectsFromFile();
      this.directory = new ListableDirectory
              .ListableTemplateBuilder()
              .AddTopLevelFolder("users")
              .AddFolderUID(this.request.getDoctorUID())
              .AddSubFolder("appointments")
              .Build();
      this.ReservedAppointments = this.loadBehaviour.LoadAll(directory);
      this.dateTimeFilter = new FilterRemovePrecedingDate();
      this.ReservedAppointments = dateTimeFilter.filterByDateTime(ReservedAppointments, LocalDateTime.of(this.request.getDateFrom(), LocalTime.MIN));
      this.dateTimeFilter = new FilterRemoveSucceedingDate();
      this.ReservedAppointments = dateTimeFilter.filterByDateTime(ReservedAppointments, LocalDateTime.of(this.request.getDateTo(), LocalTime.MAX));
      this.TakenAppointmentsJList.setModel(ReservedAppointments);
      this.HourTimeJComboBox.setEnabled(false);
      this.MinuteTimeJComboBox.setEnabled(false);
      this.setVisible(true);
      this.SaveAppointmentJButton.setEnabled(false);
      this.TakenAppointmentsJList.setEnabled(false);

   }

   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jLabel3 = new javax.swing.JLabel();
      jLabel11 = new javax.swing.JLabel();
      PatientNameJLabel3 = new javax.swing.JLabel();
      AppointmentAvailableIndicator = new javax.swing.JPanel();
      jLabel6 = new javax.swing.JLabel();
      CreateAppointmentDoctorNameJLabel = new javax.swing.JLabel();
      NewAppointmentDateJTextField = new javax.swing.JTextField();
      jLabel7 = new javax.swing.JLabel();
      MinuteTimeJComboBox = new javax.swing.JComboBox<>();
      HourTimeJComboBox = new javax.swing.JComboBox<>();
      jLabel8 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      SaveAppointmentJButton = new javax.swing.JButton();
      jScrollPane1 = new javax.swing.JScrollPane();
      TakenAppointmentsJList = new javax.swing.JList<>();
      jLabel1 = new javax.swing.JLabel();
      DoctorNameJLabel = new javax.swing.JLabel();
      jLabel9 = new javax.swing.JLabel();
      PatientNameJLabel1 = new javax.swing.JLabel();
      jLabel10 = new javax.swing.JLabel();
      DateFromJLabel = new javax.swing.JLabel();
      jLabel12 = new javax.swing.JLabel();
      DateToJLabel = new javax.swing.JLabel();

      jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
      jLabel3.setText("Time:");

      jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
      jLabel11.setText("Date From:");

      PatientNameJLabel3.setText("jLabel4");

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

      jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
      jLabel6.setText("Time");

      NewAppointmentDateJTextField.addCaretListener(new javax.swing.event.CaretListener() {
         public void caretUpdate(javax.swing.event.CaretEvent evt) {
            NewAppointmentDateJTextFieldCaretUpdate(evt);
         }
      });

      jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
      jLabel7.setText("Patient:");

      MinuteTimeJComboBox.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
      MinuteTimeJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "10", "20", "30", "40", "50" }));
      MinuteTimeJComboBox.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            MinuteTimeJComboBoxActionPerformed(evt);
         }
      });

      HourTimeJComboBox.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
      HourTimeJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "09", "10", "11", "12", "13", "14", "15", "16", "17", "18" }));

      jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
      jLabel8.setText("Date:");

      jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

      SaveAppointmentJButton.setText("Save");
      SaveAppointmentJButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            SaveAppointmentJButtonActionPerformed(evt);
         }
      });

      TakenAppointmentsJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      jScrollPane1.setViewportView(TakenAppointmentsJList);

      jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
      jLabel1.setText("Taken Appointments");

      DoctorNameJLabel.setText("Doctor ID");

      jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
      jLabel9.setText("Doctor:");

      PatientNameJLabel1.setText("Patient ID");

      jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
      jLabel10.setText("Date From:");

      DateFromJLabel.setText("Date From");

      jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
      jLabel12.setText("Date To:");

      DateToJLabel.setText("Date To");

      javax.swing.GroupLayout AppointmentAvailableIndicatorLayout = new javax.swing.GroupLayout(AppointmentAvailableIndicator);
      AppointmentAvailableIndicator.setLayout(AppointmentAvailableIndicatorLayout);
      AppointmentAvailableIndicatorLayout.setHorizontalGroup(
         AppointmentAvailableIndicatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(AppointmentAvailableIndicatorLayout.createSequentialGroup()
            .addGap(45, 45, 45)
            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(AppointmentAvailableIndicatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(AppointmentAvailableIndicatorLayout.createSequentialGroup()
                  .addComponent(CreateAppointmentDoctorNameJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AppointmentAvailableIndicatorLayout.createSequentialGroup()
                  .addGroup(AppointmentAvailableIndicatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                     .addGroup(AppointmentAvailableIndicatorLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(SaveAppointmentJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addGroup(AppointmentAvailableIndicatorLayout.createSequentialGroup()
                        .addComponent(NewAppointmentDateJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HourTimeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MinuteTimeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                  .addGap(29, 29, 29))))
         .addGroup(AppointmentAvailableIndicatorLayout.createSequentialGroup()
            .addGroup(AppointmentAvailableIndicatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(AppointmentAvailableIndicatorLayout.createSequentialGroup()
                  .addGap(45, 45, 45)
                  .addGroup(AppointmentAvailableIndicatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                     .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(AppointmentAvailableIndicatorLayout.createSequentialGroup()
                  .addGap(22, 22, 22)
                  .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(DoctorNameJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(18, 18, 18)
                  .addComponent(DateToJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AppointmentAvailableIndicatorLayout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(PatientNameJLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(DateFromJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(137, 137, 137))
      );
      AppointmentAvailableIndicatorLayout.setVerticalGroup(
         AppointmentAvailableIndicatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(AppointmentAvailableIndicatorLayout.createSequentialGroup()
            .addGroup(AppointmentAvailableIndicatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(AppointmentAvailableIndicatorLayout.createSequentialGroup()
                  .addGroup(AppointmentAvailableIndicatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(AppointmentAvailableIndicatorLayout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(CreateAppointmentDoctorNameJLabel))
                     .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AppointmentAvailableIndicatorLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(AppointmentAvailableIndicatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                           .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(PatientNameJLabel1)
                           .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(DateFromJLabel))))
                  .addGap(15, 15, 15)
                  .addGroup(AppointmentAvailableIndicatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(DoctorNameJLabel)
                     .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
               .addGroup(AppointmentAvailableIndicatorLayout.createSequentialGroup()
                  .addGap(61, 61, 61)
                  .addGroup(AppointmentAvailableIndicatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(DateToJLabel))))
            .addGap(40, 40, 40)
            .addGroup(AppointmentAvailableIndicatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(NewAppointmentDateJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(HourTimeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(MinuteTimeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(AppointmentAvailableIndicatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(AppointmentAvailableIndicatorLayout.createSequentialGroup()
                  .addGap(30, 30, 30)
                  .addComponent(jLabel2))
               .addGroup(AppointmentAvailableIndicatorLayout.createSequentialGroup()
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(AppointmentAvailableIndicatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(AppointmentAvailableIndicatorLayout.createSequentialGroup()
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(SaveAppointmentJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(23, 23, 23))
               .addGroup(AppointmentAvailableIndicatorLayout.createSequentialGroup()
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addContainerGap(23, Short.MAX_VALUE))))
      );

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(AppointmentAvailableIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(AppointmentAvailableIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

   private void MinuteTimeJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MinuteTimeJComboBoxActionPerformed
      String MinuteTime = (String) MinuteTimeJComboBox.getSelectedItem();
      String HourTime = (String) HourTimeJComboBox.getSelectedItem();
      
     
      SaveAppointmentJButton.setEnabled(false);
      if(!ReservedAppointments.isEmpty())
      {
         try
         {
            LocalTime RequestedTime = LocalTime.parse(HourTime+":"+MinuteTime, DateTimeFormatter.ISO_LOCAL_TIME);
            LocalDate RequestedDate = LocalDate.parse(NewAppointmentDateJTextField.getText(), DateTimeFormatter.ISO_LOCAL_DATE);
            LocalDateTime AppointmentDate = LocalDateTime.of(RequestedDate, RequestedTime);

            IFilterByDateTimeBehaviour Filter = new FilterIsTime();
            DefaultListModel model = Filter.filterByDateTime(ReservedAppointments, AppointmentDate);
            this.TakenAppointmentsJList.setModel(model);
            if(model.isEmpty())
            {
               SaveAppointmentJButton.setEnabled(true);
            }

         }
         catch(DateTimeParseException e)
         {
            SaveAppointmentJButton.setEnabled(false);
         }
      }
      else
      {
         SaveAppointmentJButton.setEnabled(true);
         this.HourTimeJComboBox.setEnabled(true);
         this.MinuteTimeJComboBox.setEnabled(true);
         SaveAppointmentJButton.setEnabled(true);
      }
   }//GEN-LAST:event_MinuteTimeJComboBoxActionPerformed

   private void SaveAppointmentJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAppointmentJButtonActionPerformed
      String MinuteTime = (String) MinuteTimeJComboBox.getSelectedItem();
      String HourTime = (String) HourTimeJComboBox.getSelectedItem();
      LocalTime RequestedTime = LocalTime.parse(HourTime+":"+MinuteTime, DateTimeFormatter.ISO_LOCAL_TIME);
      try
         {
            LocalDate RequestedDate = LocalDate.parse(NewAppointmentDateJTextField.getText(), DateTimeFormatter.ISO_LOCAL_DATE);
            this.appointment = new Appointment(RequestedDate, RequestedTime);
            this.appointment.setPatient(this.request.getPatientUID());
            this.appointment.setDoctor(this.request.getDoctorUID());
            this.appointment.saveAppointment(this.request.getPatientUID());
            this.appointment.saveAppointment(this.request.getDoctorUID());
            
            if(this.secretary != null)
            {
              ListableDirectory actionDirectory = new ListableDirectory
              .ListableTemplateBuilder()
              .AddTopLevelFolder("users")
              .AddFolderUID(this.secretary.getUID())
              .AddSubFolder("appointments")
              .Build();
            String string = actionDirectory.GetDirectory()+request.getUID().toString()+".ser";
            File file = new File(string);
            System.out.println(file.delete()); 
            }
            
            JOptionPane.showMessageDialog(null, "The new appointment has been created. Both users will be notified.", "Appointment Created", JOptionPane.INFORMATION_MESSAGE);
            listener.onSubFrameClose(this);

         }
         catch(DateTimeParseException e)
         {
            SaveAppointmentJButton.setEnabled(true);
         }
      
      
   }//GEN-LAST:event_SaveAppointmentJButtonActionPerformed

   private void NewAppointmentDateJTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_NewAppointmentDateJTextFieldCaretUpdate

         SaveAppointmentJButton.setEnabled(false);
         try
         {
            LocalDate AppointmentDate = LocalDate.parse(NewAppointmentDateJTextField.getText(), DateTimeFormatter.ISO_LOCAL_DATE);

            if(!ReservedAppointments.isEmpty())
            {     
               IFilterByDateTimeBehaviour Filter = new FilterIsDate();
               DefaultListModel model = Filter.filterByDateTime(ReservedAppointments, AppointmentDate.atStartOfDay());
               this.TakenAppointmentsJList.setModel(model);
                  //SaveAppointmentJButton.setEnabled(true);
            }
             this.HourTimeJComboBox.setEnabled(true);
             this.MinuteTimeJComboBox.setEnabled(true);
         }
         catch(DateTimeParseException e)
         {
            this.HourTimeJComboBox.setEnabled(false);
            this.MinuteTimeJComboBox.setEnabled(false);
            SaveAppointmentJButton.setEnabled(false);
         }
      
   }//GEN-LAST:event_NewAppointmentDateJTextFieldCaretUpdate

   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      /* Set the Nimbus look and feel */
      //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
      /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(CreateAppointmentWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(CreateAppointmentWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(CreateAppointmentWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(CreateAppointmentWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable() {
         public void run() {
            //new CreateAppointmentWindow(new AppointmentRequest()).setVisible(true);
         }
      });
   }

   public void SubFrameCloseListener (SubFrameCloseListener listener) {
    this.listener = listener;
   }
   
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JPanel AppointmentAvailableIndicator;
   private javax.swing.JLabel CreateAppointmentDoctorNameJLabel;
   private javax.swing.JLabel DateFromJLabel;
   private javax.swing.JLabel DateToJLabel;
   private javax.swing.JLabel DoctorNameJLabel;
   private javax.swing.JComboBox<String> HourTimeJComboBox;
   private javax.swing.JComboBox<String> MinuteTimeJComboBox;
   private javax.swing.JTextField NewAppointmentDateJTextField;
   private javax.swing.JLabel PatientNameJLabel1;
   private javax.swing.JLabel PatientNameJLabel3;
   private javax.swing.JButton SaveAppointmentJButton;
   private javax.swing.JList<String> TakenAppointmentsJList;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel10;
   private javax.swing.JLabel jLabel11;
   private javax.swing.JLabel jLabel12;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JLabel jLabel8;
   private javax.swing.JLabel jLabel9;
   private javax.swing.JScrollPane jScrollPane1;
   // End of variables declaration//GEN-END:variables
}
