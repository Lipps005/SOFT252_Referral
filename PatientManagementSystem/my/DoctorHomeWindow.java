/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import my.models.Appointment;
import my.models.AppointmentRequest;
import my.models.Doctor;
import my.models.Patient;
import my.models.User;
import my.models.userevents.Listable.FilterByString;
import my.models.userevents.Listable.FilterByUID;
import my.models.userevents.Listable.FilterRemovePrecedingDate;
import my.models.userevents.Listable.IFilterByDateTimeBehaviour;
import my.models.userevents.Listable.IFilterByStringBehaviour;
import my.models.userevents.Listable.ILoadAllBehaviour;
import my.models.userevents.Listable.ListableDirectory;
import my.models.userevents.Listable.LoadObjectsFromFile;
import my.models.userevents.Listable.LoadUsers;
import my.models.userevents.SetPropertiesAsDoctor;
import my.models.userevents.SetPropertiesAsPatient;
import my.models.userevents.SubFrameCloseListener;

/**
 *
 * @author samue
 */
public class DoctorHomeWindow extends javax.swing.JFrame implements SubFrameCloseListener {
   
   private final Doctor WindowDoctor;   
   private ListableDirectory directory;
   private DefaultListModel AppointmentsTodayModel;
   private IFilterByDateTimeBehaviour dateTimeFilter;
   private DefaultListModel PatientsModel;
   private ILoadAllBehaviour loadBehaviour;
   private IFilterByStringBehaviour stringFilter;
   /**
    * Creates new form DoctorHomeWindow
    */
   
   public boolean getUserStatus()
   {
      if(this.WindowDoctor == null)
      {
         return false;
      }
      else
      {
         return true;
      }
   }
   
   
   public DoctorHomeWindow(String UID, String Password) {
      initComponents();
      boolean LoggedIn = false;
      Doctor doctor = (Doctor) User.loadUser(UID);
      if(doctor != null)
      {
        if(doctor.verifyPassword(Password) == true && doctor.getAccountStatus() == User.AccountStatus.ACTIVE)
        {
           LoggedIn = true;
        }
      }
      
      if(LoggedIn == true)
      {
         this.WindowDoctor = (Doctor) User.loadUser(UID);
         this.directory = new ListableDirectory.ListableTemplateBuilder()
                 .AddTopLevelFolder("users")
                 .AddFolderUID(UID)
                 .AddSubFolder("appointments")
                 .Build();
         this.loadBehaviour = new LoadObjectsFromFile();
         this.AppointmentsTodayModel = loadBehaviour.LoadAll(directory);
         this.dateTimeFilter = new FilterRemovePrecedingDate();
         this.AppointmentsTodayModel = dateTimeFilter.filterByDateTime(AppointmentsTodayModel, LocalDateTime.of(LocalDate.now(), LocalTime.MIN));
         this.DoctorApointmentsTodayJList.setModel(AppointmentsTodayModel);
         
         this.directory = new ListableDirectory.ListableTemplateBuilder().AddTopLevelFolder("users").Build();
         this.loadBehaviour = new LoadUsers();
         this.stringFilter = new FilterByUID();
         this.PatientsModel = loadBehaviour.LoadAll(directory);
         this.PatientsModel = stringFilter.filterByString(PatientsModel, "P");
         PatientsJList.setModel(PatientsModel);
         
         this.setVisible(LoggedIn);
 
      }
      else
      {
         this.WindowDoctor = null;
      }
   }

   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      AppointmentsTodayJPanel = new javax.swing.JPanel();
      jScrollPane2 = new javax.swing.JScrollPane();
      DoctorApointmentsTodayJList = new javax.swing.JList<>();
      DoctorUpcomingAppointmentsJPanel = new javax.swing.JPanel();
      jScrollPane5 = new javax.swing.JScrollPane();
      PatientsJList = new javax.swing.JList<>();
      PatientNameJTextField = new javax.swing.JTextField();
      jLabel1 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

      AppointmentsTodayJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Appointments Today"));

      DoctorApointmentsTodayJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      DoctorApointmentsTodayJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
         public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
            DoctorApointmentsTodayJListValueChanged(evt);
         }
      });
      jScrollPane2.setViewportView(DoctorApointmentsTodayJList);

      javax.swing.GroupLayout AppointmentsTodayJPanelLayout = new javax.swing.GroupLayout(AppointmentsTodayJPanel);
      AppointmentsTodayJPanel.setLayout(AppointmentsTodayJPanelLayout);
      AppointmentsTodayJPanelLayout.setHorizontalGroup(
         AppointmentsTodayJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
      );
      AppointmentsTodayJPanelLayout.setVerticalGroup(
         AppointmentsTodayJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(AppointmentsTodayJPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 559, Short.MAX_VALUE))
      );

      DoctorUpcomingAppointmentsJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Upcoming Appointments"));

      PatientsJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      PatientsJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
         public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
            PatientsJListValueChanged(evt);
         }
      });
      jScrollPane5.setViewportView(PatientsJList);

      PatientNameJTextField.addCaretListener(new javax.swing.event.CaretListener() {
         public void caretUpdate(javax.swing.event.CaretEvent evt) {
            PatientNameJTextFieldCaretUpdate(evt);
         }
      });

      jLabel1.setText("Search Patient:");

      jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
      jLabel2.setText("Schedule An Appointment");

      javax.swing.GroupLayout DoctorUpcomingAppointmentsJPanelLayout = new javax.swing.GroupLayout(DoctorUpcomingAppointmentsJPanel);
      DoctorUpcomingAppointmentsJPanel.setLayout(DoctorUpcomingAppointmentsJPanelLayout);
      DoctorUpcomingAppointmentsJPanelLayout.setHorizontalGroup(
         DoctorUpcomingAppointmentsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(DoctorUpcomingAppointmentsJPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(DoctorUpcomingAppointmentsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(PatientNameJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
               .addComponent(jScrollPane5)
               .addGroup(DoctorUpcomingAppointmentsJPanelLayout.createSequentialGroup()
                  .addGroup(DoctorUpcomingAppointmentsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addGap(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
      );
      DoctorUpcomingAppointmentsJPanelLayout.setVerticalGroup(
         DoctorUpcomingAppointmentsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(DoctorUpcomingAppointmentsJPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel2)
            .addGap(18, 18, 18)
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(PatientNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addComponent(AppointmentsTodayJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(DoctorUpcomingAppointmentsJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(AppointmentsTodayJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
         .addComponent(DoctorUpcomingAppointmentsJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

   private void DoctorApointmentsTodayJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_DoctorApointmentsTodayJListValueChanged
      try
     {
        if(!evt.getValueIsAdjusting() &&!AppointmentsTodayModel.isEmpty() && ! DoctorApointmentsTodayJList.isSelectionEmpty() )
        {
        Appointment upcomingAppointment = (Appointment)AppointmentsTodayModel.getElementAt(DoctorApointmentsTodayJList.getSelectedIndex());
        AppointmentWindow appointmentWindow = new AppointmentWindow(upcomingAppointment, new SetPropertiesAsDoctor());
        appointmentWindow.SubFrameCloseListener(this);
        DoctorApointmentsTodayJList.clearSelection();
        }
     }
     catch(NullPointerException e)
     {
        
     }
   }//GEN-LAST:event_DoctorApointmentsTodayJListValueChanged

   private void PatientsJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_PatientsJListValueChanged
      try
      {
         if(!evt.getValueIsAdjusting() && ! PatientsJList.isSelectionEmpty())
         {
            Patient selectedPatient = (Patient)PatientsModel.getElementAt(PatientsJList.getSelectedIndex());
            AppointmentRequest newRequest = new AppointmentRequest();
            newRequest.setDoctor(this.WindowDoctor.getUID());
            newRequest.setPatientUID(selectedPatient.getUID());
            newRequest.setDateFrom(LocalDate.now());
            newRequest.setDateTo(LocalDate.MAX);
            CreateAppointmentWindow appointmentWindow = new CreateAppointmentWindow(newRequest, null);
            appointmentWindow.SubFrameCloseListener(this);
            PatientsJList.clearSelection();
         }
      }
      catch(NullPointerException e)
      {
      }
   }//GEN-LAST:event_PatientsJListValueChanged

   private void PatientNameJTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_PatientNameJTextFieldCaretUpdate
      if(!PatientsModel.isEmpty())
      {
         this.stringFilter = new FilterByString();
         DefaultListModel model = stringFilter.filterByString(PatientsModel, PatientNameJTextField.getText());
         PatientsJList.setModel(model);
      }
   }//GEN-LAST:event_PatientNameJTextFieldCaretUpdate

   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      /* Set the Nimbus look and feel */
      //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
      /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(DoctorHomeWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(DoctorHomeWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(DoctorHomeWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(DoctorHomeWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable() {
         public void run() {
            //new DoctorHomeWindow().setVisible(true);
         }
      });
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JPanel AppointmentsTodayJPanel;
   private javax.swing.JList<String> DoctorApointmentsTodayJList;
   private javax.swing.JPanel DoctorUpcomingAppointmentsJPanel;
   private javax.swing.JTextField PatientNameJTextField;
   private javax.swing.JList<String> PatientsJList;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JScrollPane jScrollPane5;
   // End of variables declaration//GEN-END:variables

   @Override
   //on appointment window close
   public void onSubFrameClose(JFrame frame) {
      this.directory = new ListableDirectory.ListableTemplateBuilder()
      .AddTopLevelFolder("users")
      .AddFolderUID(WindowDoctor.getUID())
      .AddSubFolder("appointments")
      .Build();
      ILoadAllBehaviour behaviour = new LoadObjectsFromFile();
      this.AppointmentsTodayModel = behaviour.LoadAll(directory);
      DoctorApointmentsTodayJList.setModel(AppointmentsTodayModel);
      
      frame.dispose();
      
   }
}
